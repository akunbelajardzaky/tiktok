/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Nextj as PrismaNextj } from "@prisma/client";

export class NextjServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.NextjCountArgs, "select">): Promise<number> {
    return this.prisma.nextj.count(args);
  }

  async nextjs<T extends Prisma.NextjFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.NextjFindManyArgs>
  ): Promise<PrismaNextj[]> {
    return this.prisma.nextj.findMany<Prisma.NextjFindManyArgs>(args);
  }
  async nextj<T extends Prisma.NextjFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.NextjFindUniqueArgs>
  ): Promise<PrismaNextj | null> {
    return this.prisma.nextj.findUnique(args);
  }
  async createNextj<T extends Prisma.NextjCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NextjCreateArgs>
  ): Promise<PrismaNextj> {
    return this.prisma.nextj.create<T>(args);
  }
  async updateNextj<T extends Prisma.NextjUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NextjUpdateArgs>
  ): Promise<PrismaNextj> {
    return this.prisma.nextj.update<T>(args);
  }
  async deleteNextj<T extends Prisma.NextjDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.NextjDeleteArgs>
  ): Promise<PrismaNextj> {
    return this.prisma.nextj.delete(args);
  }
}
